module tb_Synchronous_FIFO;

    parameter WIDTH = 8;
    parameter DEPTH = 16;

    reg clk, rst_n, wr_en, rd_en;
    reg [WIDTH-1:0] data_in;
    wire [WIDTH-1:0] data_out;
    wire full, empty;

    integer test_case;

    Synchronous_FIFO #(.WIDTH(WIDTH), .DEPTH(DEPTH)) fifo_inst (
        .clk(clk),
        .reset(rst_n),
        .d_in(data_in),
        .w_enb(wr_en),
        .r_enb(rd_en),
        .d_out(data_out),
        .full(full),
        .empty(empty)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars;
    end

    // Test controller
    initial begin
        if (!$value$plusargs("test_case=%d", test_case)) begin
            $display("No test case specified. Exiting...");
            $finish;
        end

        rst_n = 0; wr_en = 0; rd_en = 0;
        #10 rst_n = 1;

        case (test_case)
            1: test_case_write_operation();
            2: begin
                $display("Write operation is required before reading.");
                test_case_write_operation();
                test_case_read_operation();
            end
            3: test_case_full_condition();
            4: begin
                $display("Writing all data.");
                test_case_full_condition();
                test_case_empty_condition();
            end
            5: test_case_single_element();
            6: tast_case_multiple_wrties();
            7: begin
                $display("First all writing multiple data");
                test_case_multiple_writes();
                test_case_multiple_reads();
            end
            8: test_case_wrap_around();
            9: test_case_simultaneous_read_write();
            10: test_case_reset();
            11: test_case_overflow();
            12: begin
                    test_case_write_operation();
                    test_case_underflow();
            end
            default: $display("Invalid test case selected");
        endcase

        #1000 $finish;
    end

    // Test cases

    task test_case_write_operation(); begin
        data_in = 32'hAABBCCDD;
        wr_en = 1; #10 wr_en = 0;
        if (empty) $display("Error: FIFO should not be empty.");
        else $display("Data written to FIFO correctly");
    end endtask

    task test_case_read_operation(); begin
        rd_en = 1; #10 rd_en = 0;
        if (data_out == 32'hAABBCCDD) $display("Data read correctly");
        else $display("Error: Data read mismatch.");
    end endtask

    task test_case_full_condition(); begin
        repeat (DEPTH) begin
            data_in = $random;
            wr_en = 1; #10 wr_en = 0;
        end
        if (!full) $display("Error: FIFO full flag not set.");
        else $display("FIFO full flag set correctly");
    end endtask

    task test_case_empty_condition(); begin
        while (!empty) begin
            rd_en = 1; #10 rd_en = 0;
        end
        if (!empty) $display("Error: FIFO empty flag not set.");
        else $display("FIFO empty flag set correctly");
    end endtask

    task test_case_single_element(); begin
        data_in = 32'h55667788;
        wr_en = 1; #10 wr_en = 0;
        rd_en = 1; #10 rd_en = 0;
        if (data_out == 32'h55667788) $display("Single element matched");
        else $display("Error: Single element mismatch.");
    end endtask

    task test_case_multiple_writes;
        integer i;
        begin
            for (i = 0; i < DEPTH; i = i + 1) begin
              data_in = i;
              wr_en = 1;
              #10 wr_en = 0;
        end

        if (full)
              $display("Multiple elements are written to the FIFO correctly");
        else
                $display("Multiple write test case failed");
        end
    endtask

    task test_case_multiple_reads;
      integer i;
      begin
        for (i = 0; i < DEPTH; i = i + 1) begin
          rd_en = 1;
          #10 rd_en = 0;
          if (data_out !== i)
            $display("Error: Multiple reads mismatch at index %0d", i);
        end
      end
    endtask

    task test_case_wrap_around;
      integer i;
      begin
        // 1) Fill entire FIFO
        for (i = 0; i < DEPTH; i = i + 1) begin
            data_in = i;
          wr_en   = 1;
          #10     wr_en = 0;
        end

        // 2) Read two elements out
        for (i = 0; i < 2; i = i + 1) begin
          rd_en = 1;
          #10   rd_en = 0;
        end

        // 3) Write two new elements to force wrap‑around
        data_in = 32’h77897654;
        wr_en   = 1; #10 wr_en = 0;
        data_in = 32’hABCDEF00;
        wr_en   = 1; #10 wr_en = 0;

        // 4) Read back all DEPTH elements and check order
        for (i = 0; i < DEPTH; i = i + 1) begin
          rd_en = 1; #10 rd_en = 0;
          if (data_out !== i+2 && i < DEPTH-2)
            $display("Error: wrap‑around mismatch at index %0d", i);
          else if (i == DEPTH-2 && data_out !== 32’h77897654)
            $display("Error: wrap‑around mismatch for first new element");
          else if (i == DEPTH-1 && data_out !== 32’hABCDEF00)
            $display("Error: wrap‑around mismatch for second new element");
        end

        $display("wrap‑around test case completed");
      end
    endtask

    task test_case_simultaneous_read_write;
      begin
        data_in = 32’hF1234567;
        wr_en   = 1; rd_en = 0; #10
        wr_en   = 0; rd_en = 1; #10

        data_in = 32’h9ABCDEF0;
        wr_en   = 1; rd_en = 1; #20  // both asserted

        // After simultaneous read/write, FIFO should output the old d_out
        if (data_out !== 32’hF1234567)
          $display("Error: simultaneous read/write failed. Expected F1234567, got %h", data_out);
        else
          $display("simultaneous read/write test case passed");

        wr_en = 0; rd_en = 0;
      end
    endtask

    task test_case_reset;
      begin
        // pre-fill FIFO to non-empty
        data_in = 32’hFFEEDDCC;
        wr_en   = 1; #10 wr_en = 0;

        // Assert reset
        rst_n = 0; #10 rst_n = 1; // active‑low reset pulse

        if (!empty)
          $display("Error: FIFO not empty after reset.");
        else
          $display("FIFO is empty after reset");
      end
    endtask

    task test_case_overflow;
      integer i;
      begin
        // Fill FIFO to full
        for (i = 0; i < DEPTH; i = i + 1) begin
          data_in = $random;
          wr_en   = 1; #10 wr_en = 0;
        end

        if (full)
          $display("FIFO is full now");
        else
          $display("Error: FIFO did not assert full when expected");

        // Attempt one more write
        data_in = $random;
        wr_en   = 1; #10 wr_en = 0;

        if (!full)
          $display("Error: overflow write attempt not prevented when FIFO is full");
        else
          $display("Overflow test case passed (extra write blocked)");
      end
    endtask

    task test_case_underflow(); begin
        if (!empty) begin
            $display("FIFO is not empty before underflow test!");
            rd_en = 1; #10 rd_en = 0; // reading single element
        end

        #10 rd_en = 1; #10 rd_en = 0;
        $display("Result after underflow test");

        if (data_out == {WIDTH{1'bx}} || data_out === data_out)
            $display("Underflow test passed");
        else $display("Invalid Data on underflow");

        if (!empty)
            $display("FIFO is not empty... for underflow test FIFO should be empty");
    end endtask

endmodule
